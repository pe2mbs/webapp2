#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2021 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: 2023-01-07 16:14:56 version 2.3.707 by user W124574
#
import webapp.api as API
from webapp.common.dbmem import DbBaseMemory
from webapp.common.crudmixin import CrudModelMixin
import webapp.common   as common
from webapp.backend.access_ref.schema import AccessRefSchema
from sqlalchemy.orm import backref




class AccessRef( API.db.Model, CrudModelMixin ):
    """Model for the access_ref table, this is generated by the gencrud.py module
    When modifing the file make sure that you remove the table from the configuration.
    """
    __field_list__      = ['AR_ID', 'AR_A_ID', 'AR_R_ID', 'AR_INDEX']
    __tablename__       = 'access_ref'
    __schema_cls__      = AccessRefSchema()
    AR_ID               = API.db.Column( "ar_id", API.db.Integer, autoincrement = True, primary_key = True )
    AR_A_ID             = API.db.Column( "ar_a_id", API.db.Integer, API.db.ForeignKey( "access.a_id", ondelete = "CASCADE" ), nullable = False )
    AR_R_ID             = API.db.Column( "ar_r_id", API.db.Integer, API.db.ForeignKey( "roles.r_id", ondelete = "CASCADE" ), nullable = False )
    # AR_INDEX            = API.db.Column( "ar_index", API.db.Integer, nullable = False )

    AR_A_ID_FK          = API.db.relationship( 'Access', backref = backref("access_ref_ar_a_id", cascade="all, delete"), foreign_keys=[ AR_A_ID ], lazy = True )
    AR_R_ID_FK          = API.db.relationship( 'Role', backref = backref("access_ref_ar_r_id", cascade="all, delete"), foreign_keys=[ AR_R_ID ], lazy = True )

    def memoryInstance( self ):
        return AccessRefMemory( self )

API.dbtables.register( AccessRef )

class AccessRefMemory( DbBaseMemory ):
    __model_cls__       = AccessRef
    __tablename__       = 'access_ref'


API.memorytables.register( AccessRefMemory )
