#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2023 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: 2021-04-04 08:26:10 version 2.1.680 by user mbertens
#
import webapp.api as API
from marshmallow import fields, pre_load, post_dump
from webapp.common import value2Label, utcDateString2Local
from webapp.backend.user.constant import C_U_ACTIVE_MAPPING, C_U_LISTITEMS_MAPPING


class UserSchema( API.mm.SQLAlchemySchema ):
    """Schema for the user table, this is generated by the gencrud.py module
    When modifing the file make sure that you remove the table from the configuration.
    """
    U_ID            = fields.Integer()
    U_ACTIVE        = fields.Boolean()
    U_NAME          = fields.String()
    U_R_ID          = fields.Integer()
    U_R_ID_FK       = API.mm.Nested( 'RoleSchema' )
    U_HASH_PASSWORD = fields.String()
    U_LAST_LOGIN    = fields.DateTime()
    U_PASSWD_TRIES  = fields.Integer()
    U_FIRST_NAME    = fields.String()
    U_MIDDLE_NAME   = fields.String()
    U_LAST_NAME     = fields.String()
    U_EMAIL         = fields.String()
    U_REMARK        = fields.String()
    U_LOCALE        = fields.Integer()
    U_LISTITEMS     = fields.Integer()
    U_PROFILE       = fields.String()
    U_JSON_DATA     = fields.String()

    @post_dump
    def post_dump_process( self, in_data, **kwargs ):
        in_data[ 'U_ACTIVE_LABEL' ]     = value2Label( C_U_ACTIVE_MAPPING, in_data[ 'U_ACTIVE' ] )
        in_data[ 'U_LISTITEMS_LABEL' ]  = value2Label( C_U_LISTITEMS_MAPPING, in_data[ 'U_LISTITEMS' ] )
        return in_data

    @pre_load
    def pre_load_process( self, out_data, **kwargs ):
        return out_data


userSchema   = UserSchema()
usersSchema  = UserSchema( many = True )

