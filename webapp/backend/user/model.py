#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2021 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: 2021-04-04 08:26:10 version 2.1.680 by user mbertens
#
import webapp.api as API
from webapp.backend.user.schema import UserSchema
from webapp.common import DbBaseMemory, CrudModelMixin


class User( API.db.Model, CrudModelMixin ):
    """Model for the user table, this is generated by the gencrud.py module
    When modifing the file make sure that you remove the table from the configuration.
    """
    __field_list__      = ['U_ID', 'U_ACTIVE', 'U_NAME', 'U_R_ID', 'U_HASH_PASSWORD', 'U_LAST_LOGIN', 'U_PASSWD_TRIES',
                           'U_FIRST_NAME', 'U_MIDDLE_NAME', 'U_LAST_NAME', 'U_EMAIL',
                           'U_REMARK', 'U_LOCALE', 'U_LISTITEMS', 'U_PROFILE', 'U_JSON_DATA' ]
    __tablename__       = 'user'
    __schema_cls__      = UserSchema()
    U_ID                = API.db.Column( "u_id", API.db.Integer, autoincrement = True, primary_key = True )
    U_ACTIVE            = API.db.Column( "u_active", API.db.Boolean, default = False )
    U_NAME              = API.db.Column( "u_name", API.db.String( 30 ), nullable = False )
    U_R_ID              = API.db.Column( "u_r_id", API.db.Integer, API.db.ForeignKey( "roles.r_id" ) )
    U_HASH_PASSWORD     = API.db.Column( "u_hash_password", API.db.String( 255 ), nullable = True )
    U_LAST_LOGIN        = API.db.Column( "u_last_login", API.db.DateTime, nullable = True )
    U_PASSWD_TRIES      = API.db.Column( "u_passwd_tries", API.db.Integer, default = 0 )
    U_FIRST_NAME        = API.db.Column( "u_first_name", API.db.String( 50 ), nullable = False )
    U_MIDDLE_NAME       = API.db.Column( "u_middle_name", API.db.String( 50 ), default = "NULL" )
    U_LAST_NAME         = API.db.Column( "u_last_name", API.db.String( 50 ), nullable = False )
    U_EMAIL             = API.db.Column( "u_email", API.db.String( 100 ), nullable = False )
    U_REMARK            = API.db.Column( "u_remark", API.db.LONGTEXT, default = "NULL" )
    U_LOCALE            = API.db.Column( "u_locale", API.db.Integer, default = 1 )
    #U_LOCALE            = API.db.Column( "u_locale", API.db.Integer, API.db.ForeignKey( "locale.l_id", ondelete = "CASCADE" ) )
    U_LISTITEMS         = API.db.Column( "u_listitems", API.db.Integer, default = 10 )
    U_PROFILE           = API.db.Column( "u_profile", API.db.LONGTEXT, default = "NULL" )
    U_JSON_DATA         = API.db.Column( "u_json_data", API.db.LONGTEXT, default = "NULL" )

    U_R_ID_FK           = API.db.relationship( 'Role', backref = "user_u_role", foreign_keys=[ U_R_ID ], lazy = True )
    #U_LOCALE_FK         = API.db.relationship( 'Locale', backref = "user_u_locale", foreign_keys=[ U_LOCALE ], lazy = True )
    #U_R_ID_FK           = API.db.relationship( 'Role', backref = 'user', lazy = True )
    API.db.UniqueConstraint( 'U_NAME', name='U_NAME_IDX' )

    def memoryInstance( self ):
        return UserMemory( self )

    def cloneRecord( self, record ):
        for field in self.__field_list__:
            setattr( record, field, getattr( self, field ) )

        return

API.dbtables.register( User )


class UserMemory( DbBaseMemory ):
    __model_cls__       = User
    __tablename__       = 'user'


API.memorytables.register( UserMemory )
